'use client';

import EnhancedProductGrid from 'components/enhanced/product-grid';
import ProductRecommendations from 'components/enhanced/product-recommendations';
import { browserPrefetchManager } from 'lib/graphql/browser-prefetch-manager';
import { WooCommerceProduct } from 'lib/woocommerce/types';
import { useEffect, useState } from 'react';

export default function WorkingPrefetchDemo() {
  const [products, setProducts] = useState<WooCommerceProduct[]>([]);
  const [prefetchStats, setPrefetchStats] = useState<any>(null);
  const [logs, setLogs] = useState<string[]>([]);

  // Generate mock products
  useEffect(() => {
    const mockProducts: WooCommerceProduct[] = Array.from({ length: 20 }, (_, i) => ({
      id: i + 1,
      name: `Demo Product ${i + 1}`,
      slug: `demo-product-${i + 1}`,
      price: `$${(Math.random() * 100 + 10).toFixed(2)}`,
      regular_price: `$${(Math.random() * 100 + 10).toFixed(2)}`,
      sale_price: Math.random() > 0.7 ? `$${(Math.random() * 50 + 5).toFixed(2)}` : '',
      on_sale: Math.random() > 0.7,
      images: [{
        id: i + 1,
        src: `https://picsum.photos/400/400?random=${i + 1}`,
        alt: `Demo Product ${i + 1}`,
      }],
      stock_status: Math.random() > 0.1 ? 'instock' : 'outofstock',
      categories: [{ id: 1, name: 'Electronics', slug: 'electronics' }],
    }));

    setProducts(mockProducts);
  }, []);

  // Update prefetch stats and logs
  useEffect(() => {
    const updateStats = () => {
      const stats = browserPrefetchManager.getStats();
      setPrefetchStats(stats);
    };

    updateStats();
    const interval = setInterval(updateStats, 1000);
    return () => clearInterval(interval);
  }, []);

  // Capture console logs
  useEffect(() => {
    const originalLog = console.log;
    console.log = (...args) => {
      if (args[0] && typeof args[0] === 'string' && args[0].includes('[Prefetch]')) {
        const timestamp = new Date().toLocaleTimeString();
        setLogs(prev => [`[${timestamp}] ${args.join(' ')}`, ...prev.slice(0, 19)]);
      }
      originalLog(...args);
    };

    return () => {
      console.log = originalLog;
    };
  }, []);

  const handleProductHover = (product: WooCommerceProduct) => {
    console.log(`[Demo] User hovered over: ${product.name}`);
  };

  const handleProductPrefetch = (product: WooCommerceProduct) => {
    console.log(`[Demo] Product prefetched: ${product.name}`);
  };

  const clearQueue = () => {
    browserPrefetchManager.clearQueue();
    console.log('[Demo] Cleared prefetch queue');
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">üöÄ Working Prefetch & Lazy Loading Demo</h1>
      
      {/* Stats and Controls */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üìä Prefetch Stats</h3>
          {prefetchStats ? (
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Queue Length:</span>
                <span className="font-mono">{prefetchStats.queueLength}</span>
              </div>
              <div className="flex justify-between">
                <span>Active Prefetches:</span>
                <span className="font-mono">{prefetchStats.activePrefetches}</span>
              </div>
              <div className="flex justify-between">
                <span>Cache Size:</span>
                <span className="font-mono">{prefetchStats.cacheSize}</span>
              </div>
              <div className="flex justify-between">
                <span>Route History:</span>
                <span className="font-mono">{prefetchStats.routeHistory.length}</span>
              </div>
            </div>
          ) : (
            <div className="text-gray-500">Loading stats...</div>
          )}
        </div>

        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üéÆ Controls</h3>
          <div className="space-y-2">
            <button
              onClick={clearQueue}
              className="w-full px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm"
            >
              Clear Prefetch Queue
            </button>
            <button
              onClick={() => browserPrefetchManager.triggerPrefetch('idle')}
              className="w-full px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
            >
              Trigger Idle Prefetch
            </button>
          </div>
        </div>

        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üìù Live Logs</h3>
          <div className="h-32 overflow-y-auto bg-gray-50 p-2 rounded text-xs font-mono">
            {logs.length > 0 ? (
              logs.map((log, index) => (
                <div key={index} className="text-green-600 mb-1">
                  {log}
                </div>
              ))
            ) : (
              <div className="text-gray-500">No logs yet. Hover over products!</div>
            )}
          </div>
        </div>
      </div>

      {/* Product Grid */}
      <div className="bg-white p-6 border border-gray-200 rounded-lg mb-8">
        <h3 className="text-lg font-semibold mb-4">üõçÔ∏è Product Grid (Hover to Test Prefetching)</h3>
        <EnhancedProductGrid
          products={products}
          enablePrefetching={true}
          enableLazyLoading={true}
          enableInfiniteScroll={true}
          showPrefetchIndicator={true}
          pageSize={8}
          onProductHover={handleProductHover}
          onProductPrefetch={handleProductPrefetch}
        />
      </div>

      {/* Product Recommendations */}
      <div className="bg-white p-6 border border-gray-200 rounded-lg mb-8">
        <ProductRecommendations
          category="electronics"
          limit={6}
          enablePrefetching={true}
          enableLazyLoading={true}
          showPrefetchIndicator={true}
          title="Recommended for You"
          onProductHover={handleProductHover}
          onProductPrefetch={handleProductPrefetch}
        />
      </div>

      {/* Instructions */}
      <div className="bg-green-50 p-4 border border-green-200 rounded-lg">
        <h3 className="text-lg font-semibold text-green-800 mb-2">‚úÖ How to Test Prefetching & Lazy Loading:</h3>
        <ul className="text-sm text-green-700 space-y-1">
          <li>‚Ä¢ <strong>Hover over products</strong> - See prefetch logs appear in real-time</li>
          <li>‚Ä¢ <strong>Scroll down</strong> - More products load automatically (lazy loading)</li>
          <li>‚Ä¢ <strong>Wait 2 seconds</strong> - Idle prefetching will trigger automatically</li>
          <li>‚Ä¢ <strong>Watch the stats</strong> - Queue length and cache size update in real-time</li>
          <li>‚Ä¢ <strong>Check console</strong> - Open DevTools to see detailed prefetch activity</li>
          <li>‚Ä¢ <strong>Look for indicators</strong> - "Prefetching" and "‚úì Cached" badges on products</li>
        </ul>
      </div>
    </div>
  );
}
