'use client';

import EnhancedProductGridItems from 'components/lazy/enhanced-product-grid-items';
import { graphqlPrefetchManager } from 'lib/graphql/prefetch-manager';
import { WooCommerceProduct } from 'lib/woocommerce/types';
import { useEffect, useState } from 'react';

export default function PrefetchLazyDemoPage() {
  const [products, setProducts] = useState<WooCommerceProduct[]>([]);
  const [prefetchStats, setPrefetchStats] = useState<any>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [showInstructions, setShowInstructions] = useState(true);

  // Mock products for demo
  useEffect(() => {
    const mockProducts: WooCommerceProduct[] = Array.from({ length: 30 }, (_, i) => ({
      id: i + 1,
      name: `Demo Product ${i + 1}`,
      slug: `demo-product-${i + 1}`,
      price: `$${(Math.random() * 100 + 10).toFixed(2)}`,
      regular_price: `$${(Math.random() * 100 + 10).toFixed(2)}`,
      sale_price: Math.random() > 0.7 ? `$${(Math.random() * 50 + 5).toFixed(2)}` : '',
      on_sale: Math.random() > 0.7,
      images: [{
        id: i + 1,
        src: `https://picsum.photos/400/400?random=${i + 1}`,
        alt: `Demo Product ${i + 1}`,
      }],
      stock_status: Math.random() > 0.1 ? 'instock' : 'outofstock',
    }));

    setProducts(mockProducts);
  }, []);

  // Update prefetch stats and logs
  useEffect(() => {
    const updateStats = () => {
      const stats = graphqlPrefetchManager.getStats();
      setPrefetchStats(stats);
    };

    updateStats();
    const interval = setInterval(updateStats, 1000);
    return () => clearInterval(interval);
  }, []);

  // Add log function
  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [`[${timestamp}] ${message}`, ...prev.slice(0, 9)]);
  };

  // Override console.log to capture prefetch logs
  useEffect(() => {
    const originalLog = console.log;
    console.log = (...args) => {
      if (args[0] && typeof args[0] === 'string' && args[0].includes('[Prefetch]')) {
        addLog(args.join(' '));
      }
      originalLog(...args);
    };

    return () => {
      console.log = originalLog;
    };
  }, []);

  // Trigger idle prefetching
  const triggerIdlePrefetch = () => {
    graphqlPrefetchManager.triggerPrefetch('idle');
    addLog('Manually triggered idle prefetching');
  };

  // Clear prefetch queue
  const clearQueue = () => {
    graphqlPrefetchManager.clearQueue();
    addLog('Cleared prefetch queue');
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">üöÄ Prefetching & Lazy Loading Demo</h1>
      
      {/* Instructions */}
      {showInstructions && (
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-semibold text-blue-800 mb-2">How to Test:</h3>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ <strong>Hover over products</strong> - Triggers prefetching (check console)</li>
                <li>‚Ä¢ <strong>Scroll down</strong> - Lazy loads more products</li>
                <li>‚Ä¢ <strong>Wait 2 seconds</strong> - Idle prefetching activates</li>
                <li>‚Ä¢ <strong>Check stats below</strong> - Monitor prefetch activity</li>
                <li>‚Ä¢ <strong>Open DevTools</strong> - See network requests</li>
              </ul>
            </div>
            <button
              onClick={() => setShowInstructions(false)}
              className="text-blue-600 hover:text-blue-800"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      {/* Stats and Controls */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Prefetch Stats */}
        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üìä Prefetch Stats</h3>
          {prefetchStats ? (
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Queue Length:</span>
                <span className="font-mono">{prefetchStats.queueLength}</span>
              </div>
              <div className="flex justify-between">
                <span>Active Prefetches:</span>
                <span className="font-mono">{prefetchStats.activePrefetches}</span>
              </div>
              <div className="flex justify-between">
                <span>Route History:</span>
                <span className="font-mono">{prefetchStats.routeHistory.length}</span>
              </div>
              <div className="flex justify-between">
                <span>User Behavior:</span>
                <span className="font-mono">{Object.keys(prefetchStats.userBehavior).length}</span>
              </div>
            </div>
          ) : (
            <div className="text-gray-500">Loading stats...</div>
          )}
        </div>

        {/* Controls */}
        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üéÆ Controls</h3>
          <div className="space-y-2">
            <button
              onClick={triggerIdlePrefetch}
              className="w-full px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
            >
              Trigger Idle Prefetch
            </button>
            <button
              onClick={clearQueue}
              className="w-full px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm"
            >
              Clear Queue
            </button>
            <button
              onClick={() => setShowInstructions(true)}
              className="w-full px-3 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 text-sm"
            >
              Show Instructions
            </button>
          </div>
        </div>

        {/* Live Logs */}
        <div className="bg-white p-4 border border-gray-200 rounded-lg">
          <h3 className="text-lg font-semibold mb-3">üìù Live Logs</h3>
          <div className="h-32 overflow-y-auto bg-gray-50 p-2 rounded text-xs font-mono">
            {logs.length > 0 ? (
              logs.map((log, index) => (
                <div key={index} className="text-green-600 mb-1">
                  {log}
                </div>
              ))
            ) : (
              <div className="text-gray-500">No logs yet. Hover over products to see prefetch activity!</div>
            )}
          </div>
        </div>
      </div>

      {/* Product Grid */}
      <div className="bg-white p-4 border border-gray-200 rounded-lg">
        <h3 className="text-lg font-semibold mb-4">üõçÔ∏è Product Grid (Lazy Loading + Prefetching)</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          <EnhancedProductGridItems 
            products={products} 
            enablePrefetching={true}
            enableLazyLoading={true}
          />
        </div>
      </div>

      {/* Performance Info */}
      <div className="mt-8 p-4 bg-green-50 border border-green-200 rounded-lg">
        <h3 className="text-lg font-semibold text-green-800 mb-2">‚úÖ What You Should See:</h3>
        <ul className="text-sm text-green-700 space-y-1">
          <li>‚Ä¢ <strong>Immediate display</strong> of first 6 products</li>
          <li>‚Ä¢ <strong>Lazy loading</strong> of more products as you scroll</li>
          <li>‚Ä¢ <strong>Prefetch logs</strong> in console when hovering over products</li>
          <li>‚Ä¢ <strong>Stats updates</strong> showing queue and active prefetches</li>
          <li>‚Ä¢ <strong>Idle prefetching</strong> after 2 seconds of inactivity</li>
        </ul>
      </div>
    </div>
  );
}
